openapi: 3.0.1
info:
  title: Transaction service API
  description: Transaction service API
  version: 1.0.0
servers:
  - url: "/api"
paths:
  /transaction/{userId}:
    get:
      tags:
        - transaction
      summary: returns all transaction
      description: |
        Return all the transactions for a particular user
      operationId: transactionHandler.getAllTransactions
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
          example: 214231
      responses:
        200:
          description: array of transaction objs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionObjArray"
        400:
          description: bad input parameter
          content: {}
    post:
      tags:
        - transaction
      summary: add a new transaction object
      description: |
        Post to Cloud Datastore, with the request body as the new transaction in JSON
      operationId: transactionHandler.postTransaction
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
          example: 214231
      requestBody:
        description: transaction to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newTransaction"
      responses:
        201:
          description: transaction id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionIdObj"
        400:
          description: bad input parameter
          content: {}
  /transaction/{userId}/{transactionId}:
    get:
      tags:
        - transaction
      summary: Return the transaction info for transactionId {id}
      description: |
        Return the transaction info for transactionId {id}
      operationId: transactionHandler.getTransaction
      parameters:
        - name: transactionId
          in: path
          description: ID of transaction to get
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
          example: 214231
      responses:
        200:
          description: transaction obj
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionObj"
        400:
          description: bad input parameter
          content: {}
    put:
      tags:
        - transaction
      summary: modify an existing transaction object
      description: |
        In the request body as the updated profile in JSON, update the transaction with {id}
      operationId: transactionHandler.updateTransaction
      parameters:
        - name: transactionId
          in: path
          description: ID of transaction to update
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
          example: 214231
      requestBody:
        description: Transaction to modify
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newTransaction"
      responses:
        204:
          description: new transaction object with updated data and same id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionObj"
        400:
          description: bad input parameter
          content: {}
    delete:
      tags:
        - transaction
      summary: delete an existing transaction object
      description: |
        Delete the transaction with {id}
      operationId: transactionHandler.deleteTransaction
      parameters:
        - name: transactionId
          in: path
          description: ID of transaction to delete
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
          example: 214231
      responses:
        204:
          description: successfully deleted transaction
        400:
          description: bad input parameter
          content: {}
components:
  schemas:
    TransactionType:
      type: string
      enum:
        - credit
        - debit
    newTransaction:
      type: object
      properties:
        amount:
          type: string
          example: "2000"
        transactionType:
          type: string
          $ref: "#/components/schemas/TransactionType"
    transactionIdObj:
      type: object
      properties:
        transactionId:
          type: string
          example: "20931"
    transactionObj:
      type: object
      properties:
        transactionId:
          type: string
          example: "20931"
        userId:
          type: string
          example: "43243"
        amount:
          type: string
          example: "2000"
        transactionType:
          type: string
          $ref: "#/components/schemas/TransactionType"
    transactionObjArray:
      type: array
      items:
        $ref: "#/components/schemas/transactionObj"
